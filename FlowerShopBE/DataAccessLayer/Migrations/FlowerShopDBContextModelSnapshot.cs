// <auto-generated />
using System;
using DataAccessLayer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccessLayer.Migrations
{
    [DbContext(typeof(FlowerShopDBContext))]
    partial class FlowerShopDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BusinessObject.Model.Bouquet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BouquetTypeId")
                        .HasColumnType("int")
                        .HasColumnName("BouquetTypeID");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ImageURL");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("isAvailable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.HasKey("Id")
                        .HasName("PK__Bouquet__C1F887FF3D8E2E2E");

                    b.HasIndex("BouquetTypeId");

                    b.ToTable("Bouquet", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Model.BouquetType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id")
                        .HasName("PK__BouquetT__5E5A8E27D3C2F1E3");

                    b.ToTable("BouquetType", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Model.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("BouquetId")
                        .HasColumnType("int")
                        .HasColumnName("BouquetID");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("DeliveryDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderStatus")
                        .HasColumnType("int");

                    b.Property<int?>("ShipperId")
                        .HasColumnType("int")
                        .HasColumnName("ShipperId");

                    b.Property<int>("SubscriptionId")
                        .HasColumnType("int")
                        .HasColumnName("SubscriptionID");

                    b.Property<DateTime?>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Id")
                        .HasName("PK__Order__3214EC07D2B2E5C3");

                    b.HasIndex("BouquetId");

                    b.HasIndex("ShipperId");

                    b.HasIndex("SubscriptionId");

                    b.ToTable("Order", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Model.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrderCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("PaymentStatus")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("Id")
                        .HasName("PK__Payment__3214EC07D1E2D7B3");

                    b.HasIndex("UserId");

                    b.ToTable("Payment", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Model.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id")
                        .HasName("PK__Role__3214EC07D5A2B2C3");

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Model.Subscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<int>("PaymentId")
                        .HasColumnType("int")
                        .HasColumnName("PaymentID");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<int>("SubscriptionPackageId")
                        .HasColumnType("int")
                        .HasColumnName("SubscriptionPackageID");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id")
                        .HasName("PK__Subscript__3214EC07E6F3A5C3");

                    b.HasIndex("PaymentId")
                        .IsUnique();

                    b.HasIndex("SubscriptionPackageId");

                    b.HasIndex("UserId");

                    b.ToTable("Subscription", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Model.SubscriptionBouquetType", b =>
                {
                    b.Property<int>("SubscriptionPackageId")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<int>("BouquetTypeId")
                        .HasColumnType("int")
                        .HasColumnName("BouquetTypeID");

                    b.HasKey("SubscriptionPackageId", "BouquetTypeId");

                    b.HasIndex("BouquetTypeId");

                    b.ToTable("SubscriptionBouquetType", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Model.SubscriptionPackage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<int>("TotalOrderAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime?>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id")
                        .HasName("PK__Subscript__3214EC07D8E2B8C3");

                    b.ToTable("SubscriptionPackage", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Model.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Phone")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("RoleID");

                    b.Property<DateTime?>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id")
                        .HasName("PK__User__3214EC07E3CDAF8B");

                    b.HasIndex("RoleId");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Model.Bouquet", b =>
                {
                    b.HasOne("BusinessObject.Model.BouquetType", "BouquetType")
                        .WithMany("Bouquets")
                        .HasForeignKey("BouquetTypeId")
                        .IsRequired()
                        .HasConstraintName("FK__Bouquet__Bouque__3A81B327");

                    b.Navigation("BouquetType");
                });

            modelBuilder.Entity("BusinessObject.Model.Order", b =>
                {
                    b.HasOne("BusinessObject.Model.Bouquet", "Bouquet")
                        .WithMany("Orders")
                        .HasForeignKey("BouquetId")
                        .HasConstraintName("FK__Order__BouquetI__3F115E1A");

                    b.HasOne("BusinessObject.Model.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("ShipperId")
                        .HasConstraintName("FK__Order__UserID__3E52440B");

                    b.HasOne("BusinessObject.Model.Subscription", "Subscription")
                        .WithMany("Orders")
                        .HasForeignKey("SubscriptionId")
                        .IsRequired()
                        .HasConstraintName("FK__Order__Subscript__40F9A68C");

                    b.Navigation("Bouquet");

                    b.Navigation("Subscription");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessObject.Model.Payment", b =>
                {
                    b.HasOne("BusinessObject.Model.User", "User")
                        .WithMany("Payments")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__Payment__UserID__3B75D760");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessObject.Model.Subscription", b =>
                {
                    b.HasOne("BusinessObject.Model.Payment", "Payment")
                        .WithOne("Subscription")
                        .HasForeignKey("BusinessObject.Model.Subscription", "PaymentId")
                        .IsRequired()
                        .HasConstraintName("FK__Subscript__Payme__45F365D3");

                    b.HasOne("BusinessObject.Model.SubscriptionPackage", "SubscriptionPackage")
                        .WithMany("Subscriptions")
                        .HasForeignKey("SubscriptionPackageId")
                        .IsRequired()
                        .HasConstraintName("FK__Subscript__Subsc__440B1D61");

                    b.HasOne("BusinessObject.Model.User", "User")
                        .WithMany("Subscriptions")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__Subscript__UserI__44FF419A");

                    b.Navigation("Payment");

                    b.Navigation("SubscriptionPackage");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessObject.Model.SubscriptionBouquetType", b =>
                {
                    b.HasOne("BusinessObject.Model.BouquetType", "BouquetType")
                        .WithMany()
                        .HasForeignKey("BouquetTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Model.SubscriptionPackage", "SubscriptionPackage")
                        .WithMany()
                        .HasForeignKey("SubscriptionPackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BouquetType");

                    b.Navigation("SubscriptionPackage");
                });

            modelBuilder.Entity("BusinessObject.Model.User", b =>
                {
                    b.HasOne("BusinessObject.Model.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK__User__RoleID__398D8EEE");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("BusinessObject.Model.Bouquet", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("BusinessObject.Model.BouquetType", b =>
                {
                    b.Navigation("Bouquets");
                });

            modelBuilder.Entity("BusinessObject.Model.Payment", b =>
                {
                    b.Navigation("Subscription");
                });

            modelBuilder.Entity("BusinessObject.Model.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("BusinessObject.Model.Subscription", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("BusinessObject.Model.SubscriptionPackage", b =>
                {
                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("BusinessObject.Model.User", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Payments");

                    b.Navigation("Subscriptions");
                });
#pragma warning restore 612, 618
        }
    }
}
